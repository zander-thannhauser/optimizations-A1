  .data
	   .string     .int_wformat, "%d\12"
	   .string   .float_wformat, "%f\12"
	   .string    .char_wformat, "%c\12"
	   .string  .string_wformat, "%s\12"
	   .string     .int_rformat, "%d"
	   .string   .float_rformat, "%f"
	   .string    .char_rformat, "%c"
	   .string  .string_rformat, "%s"
  .text
	  .frame main, 60  
	# loadI 32 => %vr8
	  loadI 32 => %vr4
	# loadI 1 => %vr9
	  loadI 1 => %vr5
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	  loadI -4 => %vr6
	# add %vr10, %vr11 => %vr12
	  add %vr0, %vr6 => %vr7
	# loadI 1 => %vr9
	# sub %vr9, %vr9 => %vr13
	# constant-fold: 1 - 1 = 0
	# loadI 0 => %vr13
	  loadI 0 => %vr8
	# loadI 4 => %vr14
	  loadI 4 => %vr9
	# mult %vr13, %vr14 => %vr15
	# constant-fold: 0 * 4 = 0
	# loadI 0 => %vr15
	# sub %vr12, %vr15 => %vr16
	# identity: X - 0 = X
	# store %vr8 => %vr16
	  store %vr4 => %vr7
	# loadI 11 => %vr17
	  loadI 11 => %vr10
	# loadI 2 => %vr18
	  loadI 2 => %vr11
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr18, %vr9 => %vr19
	# constant-fold: 2 - 1 = 1
	# loadI 1 => %vr19
	# loadI 4 => %vr14
	# mult %vr19, %vr14 => %vr20
	# constant-fold: 1 * 4 = 4
	# loadI 4 => %vr20
	# sub %vr12, %vr20 => %vr21
	  sub %vr7, %vr9 => %vr12
	# store %vr17 => %vr21
	  store %vr10 => %vr12
	# loadI 111 => %vr22
	  loadI 111 => %vr13
	# loadI 3 => %vr23
	  loadI 3 => %vr14
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr23, %vr9 => %vr24
	# constant-fold: 3 - 1 = 2
	# loadI 2 => %vr24
	# loadI 4 => %vr14
	# mult %vr24, %vr14 => %vr25
	# constant-fold: 2 * 4 = 8
	# loadI 8 => %vr25
	  loadI 8 => %vr15
	# sub %vr12, %vr25 => %vr26
	  sub %vr7, %vr15 => %vr16
	# store %vr22 => %vr26
	  store %vr13 => %vr16
	# loadI 88 => %vr27
	  loadI 88 => %vr17
	# loadI 4 => %vr14
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr14, %vr9 => %vr28
	# constant-fold: 4 - 1 = 3
	# loadI 3 => %vr28
	# loadI 4 => %vr14
	# mult %vr28, %vr14 => %vr29
	# constant-fold: 3 * 4 = 12
	# loadI 12 => %vr29
	  loadI 12 => %vr18
	# sub %vr12, %vr29 => %vr30
	  sub %vr7, %vr18 => %vr19
	# store %vr27 => %vr30
	  store %vr17 => %vr19
	# loadI 11 => %vr17
	# loadI 5 => %vr31
	  loadI 5 => %vr20
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr31, %vr9 => %vr32
	# constant-fold: 5 - 1 = 4
	# loadI 4 => %vr32
	# loadI 4 => %vr14
	# mult %vr32, %vr14 => %vr33
	# constant-fold: 4 * 4 = 16
	# loadI 16 => %vr33
	  loadI 16 => %vr21
	# sub %vr12, %vr33 => %vr34
	  sub %vr7, %vr21 => %vr22
	# store %vr17 => %vr34
	  store %vr10 => %vr22
	# loadI 44 => %vr35
	  loadI 44 => %vr23
	# loadI 6 => %vr36
	  loadI 6 => %vr24
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr36, %vr9 => %vr37
	# constant-fold: 6 - 1 = 5
	# loadI 5 => %vr37
	# loadI 4 => %vr14
	# mult %vr37, %vr14 => %vr38
	# constant-fold: 5 * 4 = 20
	# loadI 20 => %vr38
	  loadI 20 => %vr25
	# sub %vr12, %vr38 => %vr39
	  sub %vr7, %vr25 => %vr26
	# store %vr35 => %vr39
	  store %vr23 => %vr26
	# loadI 33 => %vr40
	  loadI 33 => %vr27
	# loadI 7 => %vr41
	  loadI 7 => %vr28
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr41, %vr9 => %vr42
	# constant-fold: 7 - 1 = 6
	# loadI 6 => %vr42
	# loadI 4 => %vr14
	# mult %vr42, %vr14 => %vr43
	# constant-fold: 6 * 4 = 24
	# loadI 24 => %vr43
	  loadI 24 => %vr29
	# sub %vr12, %vr43 => %vr44
	  sub %vr7, %vr29 => %vr30
	# store %vr40 => %vr44
	  store %vr27 => %vr30
	# loadI 33 => %vr40
	# loadI 8 => %vr45
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr45, %vr9 => %vr46
	# constant-fold: 8 - 1 = 7
	# loadI 7 => %vr46
	# loadI 4 => %vr14
	# mult %vr46, %vr14 => %vr47
	# constant-fold: 7 * 4 = 28
	# loadI 28 => %vr47
	  loadI 28 => %vr31
	# sub %vr12, %vr47 => %vr48
	  sub %vr7, %vr31 => %vr32
	# store %vr40 => %vr48
	  store %vr27 => %vr32
	# loadI 22 => %vr49
	  loadI 22 => %vr33
	# loadI 9 => %vr50
	  loadI 9 => %vr34
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr50, %vr9 => %vr51
	# constant-fold: 9 - 1 = 8
	# loadI 8 => %vr51
	# loadI 4 => %vr14
	# mult %vr51, %vr14 => %vr52
	# constant-fold: 8 * 4 = 32
	# loadI 32 => %vr52
	# sub %vr12, %vr52 => %vr53
	  sub %vr7, %vr4 => %vr35
	# store %vr49 => %vr53
	  store %vr33 => %vr35
	# loadI 77 => %vr54
	  loadI 77 => %vr36
	# loadI 10 => %vr55
	  loadI 10 => %vr37
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr55, %vr9 => %vr56
	# constant-fold: 10 - 1 = 9
	# loadI 9 => %vr56
	# loadI 4 => %vr14
	# mult %vr56, %vr14 => %vr57
	# constant-fold: 9 * 4 = 36
	# loadI 36 => %vr57
	  loadI 36 => %vr38
	# sub %vr12, %vr57 => %vr58
	  sub %vr7, %vr38 => %vr39
	# store %vr54 => %vr58
	  store %vr36 => %vr39
	# loadI 45 => %vr59
	  loadI 45 => %vr40
	# loadI 11 => %vr17
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr17, %vr9 => %vr60
	# constant-fold: 11 - 1 = 10
	# loadI 10 => %vr60
	# loadI 4 => %vr14
	# mult %vr60, %vr14 => %vr61
	# constant-fold: 10 * 4 = 40
	# loadI 40 => %vr61
	  loadI 40 => %vr41
	# sub %vr12, %vr61 => %vr62
	  sub %vr7, %vr41 => %vr42
	# store %vr59 => %vr62
	  store %vr40 => %vr42
	# loadI 65 => %vr63
	  loadI 65 => %vr43
	# loadI 12 => %vr64
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr64, %vr9 => %vr65
	# constant-fold: 12 - 1 = 11
	# loadI 11 => %vr65
	# loadI 4 => %vr14
	# mult %vr65, %vr14 => %vr66
	# constant-fold: 11 * 4 = 44
	# loadI 44 => %vr66
	# sub %vr12, %vr66 => %vr67
	  sub %vr7, %vr23 => %vr44
	# store %vr63 => %vr67
	  store %vr43 => %vr44
	# loadI 76 => %vr68
	  loadI 76 => %vr45
	# loadI 13 => %vr69
	  loadI 13 => %vr46
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr69, %vr9 => %vr70
	# constant-fold: 13 - 1 = 12
	# loadI 12 => %vr70
	# loadI 4 => %vr14
	# mult %vr70, %vr14 => %vr71
	# constant-fold: 12 * 4 = 48
	# loadI 48 => %vr71
	  loadI 48 => %vr47
	# sub %vr12, %vr71 => %vr72
	  sub %vr7, %vr47 => %vr48
	# store %vr68 => %vr72
	  store %vr45 => %vr48
	# loadI 87 => %vr73
	  loadI 87 => %vr49
	# loadI 14 => %vr74
	  loadI 14 => %vr50
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr74, %vr9 => %vr75
	# constant-fold: 14 - 1 = 13
	# loadI 13 => %vr75
	# loadI 4 => %vr14
	# mult %vr75, %vr14 => %vr76
	# constant-fold: 13 * 4 = 52
	# loadI 52 => %vr76
	  loadI 52 => %vr51
	# sub %vr12, %vr76 => %vr77
	  sub %vr7, %vr51 => %vr52
	# store %vr73 => %vr77
	  store %vr49 => %vr52
	# loadI 34 => %vr78
	  loadI 34 => %vr53
	# loadI 15 => %vr79
	  loadI 15 => %vr54
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr79, %vr9 => %vr80
	# constant-fold: 15 - 1 = 14
	# loadI 14 => %vr80
	# loadI 4 => %vr14
	# mult %vr80, %vr14 => %vr81
	# constant-fold: 14 * 4 = 56
	# loadI 56 => %vr81
	  loadI 56 => %vr55
	# sub %vr12, %vr81 => %vr82
	  sub %vr7, %vr55 => %vr56
	# store %vr78 => %vr82
	  store %vr53 => %vr56
	# loadI 1 => %vr9
	# i2i %vr9 => %vr4
	# loadI 14 => %vr74
	# comp %vr4, %vr74 => %vr83
	# loadI -1 => %vr83
	  loadI -1 => %vr57
	# testgt %vr83 => %vr84
	# loadI 0 => %vr84
	# cbr %vr84 -> .L0
	  .L1:
	# nop   
	# i2i %vr4 => %vr7
	# loadI 1 => %vr9
	# add %vr4, %vr9 => %vr85
	# loadI 2 => %vr85
	# i2i %vr85 => %vr5
	# loadI 15 => %vr79
	# comp %vr5, %vr79 => %vr86
	# loadI -1 => %vr86
	# testgt %vr86 => %vr87
	# loadI 0 => %vr87
	# cbr %vr87 -> .L2
	  .L3:
	# nop   
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr5, %vr9 => %vr88
	# constant-fold: 2 - 1 = 1
	# loadI 1 => %vr88
	# loadI 4 => %vr14
	# mult %vr88, %vr14 => %vr89
	# constant-fold: 1 * 4 = 4
	# loadI 4 => %vr89
	# sub %vr12, %vr89 => %vr90
	# load %vr90 => %vr91
	  load %vr12 => %vr58
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr7, %vr9 => %vr92
	# constant-fold: 1 - 1 = 0
	# loadI 0 => %vr92
	# loadI 4 => %vr14
	# mult %vr92, %vr14 => %vr93
	# constant-fold: 0 * 4 = 0
	# loadI 0 => %vr93
	# sub %vr12, %vr93 => %vr94
	# identity: X - 0 = X
	# load %vr94 => %vr95
	  load %vr7 => %vr59
	# comp %vr91, %vr95 => %vr96
	  comp %vr58, %vr59 => %vr60
	# testlt %vr96 => %vr97
	  testlt %vr60 => %vr61
	# cbrne %vr97 -> .L4
	  cbrne %vr61 -> .L4
	# i2i %vr5 => %vr7
	  .L4:
	# nop   
	# loadI 1 => %vr9
	# add %vr5, %vr9 => %vr98
	# loadI 3 => %vr98
	# i2i %vr98 => %vr5
	# loadI 15 => %vr79
	# comp %vr5, %vr79 => %vr86
	# loadI -1 => %vr86
	# testle %vr86 => %vr87
	# loadI 1 => %vr87
	# cbr %vr87 -> .L3
	# jumpI  -> .L3
	  jumpI  -> .L3
	  .L2:
	# nop   
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr4, %vr9 => %vr99
	# constant-fold: 1 - 1 = 0
	# loadI 0 => %vr99
	# loadI 4 => %vr14
	# mult %vr99, %vr14 => %vr100
	# constant-fold: 0 * 4 = 0
	# loadI 0 => %vr100
	# sub %vr12, %vr100 => %vr101
	# identity: X - 0 = X
	# load %vr101 => %vr102
	  load %vr7 => %vr62
	# i2i %vr102 => %vr6
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr7, %vr9 => %vr92
	# constant-fold: 2 - 1 = 1
	# loadI 1 => %vr92
	# loadI 4 => %vr14
	# mult %vr92, %vr14 => %vr93
	# constant-fold: 1 * 4 = 4
	# loadI 4 => %vr93
	# sub %vr12, %vr93 => %vr94
	# load %vr94 => %vr95
	  load %vr12 => %vr63
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr4, %vr9 => %vr99
	# constant-fold: 1 - 1 = 0
	# loadI 0 => %vr99
	# loadI 4 => %vr14
	# mult %vr99, %vr14 => %vr100
	# constant-fold: 0 * 4 = 0
	# loadI 0 => %vr100
	# sub %vr12, %vr100 => %vr101
	# identity: X - 0 = X
	# store %vr95 => %vr101
	  store %vr63 => %vr7
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr7, %vr9 => %vr92
	# constant-fold: 2 - 1 = 1
	# loadI 1 => %vr92
	# loadI 4 => %vr14
	# mult %vr92, %vr14 => %vr93
	# constant-fold: 1 * 4 = 4
	# loadI 4 => %vr93
	# sub %vr12, %vr93 => %vr94
	# store %vr6 => %vr94
	  store %vr62 => %vr12
	# loadI 1 => %vr9
	# add %vr4, %vr9 => %vr85
	# loadI 2 => %vr85
	# i2i %vr85 => %vr4
	# loadI 14 => %vr74
	# comp %vr4, %vr74 => %vr83
	# loadI -1 => %vr83
	# testle %vr83 => %vr84
	# loadI 1 => %vr84
	# cbr %vr84 -> .L1
	# jumpI  -> .L1
	  jumpI  -> .L1
	  .L0:
	# nop   
	# loadI 1 => %vr9
	# i2i %vr9 => %vr4
	# loadI 15 => %vr79
	# comp %vr4, %vr79 => %vr103
	# loadI -1 => %vr103
	# testgt %vr103 => %vr104
	# loadI 0 => %vr104
	# cbr %vr104 -> .L5
	  .L6:
	# nop   
	# i2i %vr0 => %vr10
	# loadI -4 => %vr11
	# add %vr10, %vr11 => %vr12
	# loadI 1 => %vr9
	# sub %vr4, %vr9 => %vr99
	# constant-fold: 1 - 1 = 0
	# loadI 0 => %vr99
	# loadI 4 => %vr14
	# mult %vr99, %vr14 => %vr100
	# constant-fold: 0 * 4 = 0
	# loadI 0 => %vr100
	# sub %vr12, %vr100 => %vr101
	# identity: X - 0 = X
	# load %vr101 => %vr102
	  load %vr7 => %vr64
	# iwrite %vr102  
	  iwrite %vr64  
	# loadI 1 => %vr9
	# add %vr4, %vr9 => %vr85
	# loadI 2 => %vr85
	# i2i %vr85 => %vr4
	# loadI 15 => %vr79
	# comp %vr4, %vr79 => %vr103
	# loadI -1 => %vr103
	# testle %vr103 => %vr104
	# loadI 1 => %vr104
	# cbr %vr104 -> .L6
	# jumpI  -> .L6
	  jumpI  -> .L6
	  .L5:
	# nop   
	# ret   
